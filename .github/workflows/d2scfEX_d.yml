name: d2scfEX_debug
on:
  workflow_dispatch:
#   schedule:
#     - cron: '10 */8 * * *'
jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.repository.owner.id == github.event.sender.id
    # env:
    #   PAT: ${{ secrets.TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ secrets.REP_SCF }}
          ref: ${{ secrets.S_BRA_Z5_C }}
      - name: clone
        run: |
          git clone --single-branch --branch main https://github.com/${{ secrets.REP_SCF }}.git
      - name: Replace
        working-directory: ./JD_tencent_scf
        run: |
          wget https://raw.githubusercontent.com/${{ secrets.USER }}/${{ secrets.CO_REP_AC }}/main/config_diy.json
          wget https://raw.githubusercontent.com/${{ secrets.USER }}/${{ secrets.CO_REP_AC }}/main/rpex.sh
          sh rpex.sh
      - name: Pre Tasks
        env:
          # EXPERIMENT: ${{ secrets.EXPERIMENT }}
          TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
          TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
          QYWX_AM: ${{ secrets.QYWX_AM }}
          JD_COOKIE: ${{ secrets.JD_COOKIE }}
          HELP_AUTHOR: ${{ secrets.HELP_AUTHOR }}
          FRUIT_BEAN_CARD: ${{ secrets.FRUIT_BEAN_CARD }}
          MARKET_COIN_TO_BEANS: ${{ secrets.MARKET_COIN_TO_BEANS }}
        run: |
          # mv .env JD_tencent_scf
          echo 'TENCENT_SECRET_ID='>JD_tencent_scf/.env
          echo 'TENCENT_SECRET_KEY='>>JD_tencent_scf/.env
          sed -i 's/TENCENT_SECRET_ID=/TENCENT_SECRET_ID='"$TENCENT_SECRET_ID"'/' JD_tencent_scf/.env
          sed -i 's/TENCENT_SECRET_KEY=/TENCENT_SECRET_KEY='"$TENCENT_SECRET_KEY"'/' JD_tencent_scf/.env
          echo 'TZ: Asia/Shanghai'>config.yml
          sed -i '/TZ:/a QYWX_AM: '"$QYWX_AM"'' config.yml
          sed -i '/TZ:/a JD_COOKIE: '"$JD_COOKIE"'' config.yml
          sed -i '/TZ:/a HELP_AUTHOR: '"$HELP_AUTHOR"'' config.yml
          sed -i '/TZ:/a FRUIT_BEAN_CARD: '"$FRUIT_BEAN_CARD"'' config.yml
          sed -i '/TZ:/a MARKET_COIN_TO_BEANS: '"$MARKET_COIN_TO_BEANS"'' config.yml
          NOT_RUN=`sed '/.*NOT_RUN:/!d;s/.*\: //' JD_tencent_scf/rpex.sh`
          sed -i '/TZ:/a NOT_RUN: '"$NOT_RUN"'' config.yml
          if [ -d diy ];
          then
            echo 'Dir diy exist, move contents'
            mv -f diy/* JD_tencent_scf/
          fi;
          if [ -f diy.sh ];
          then
            echo 'diy.sh exist, execute!'
            bash diy.sh
          fi;
      - uses: actions/setup-node@v2
      - name: install dependency
        working-directory: ./JD_tencent_scf
        run: |
          npm i
          # npm view serverless versions
          npm i -g serverless${{ secrets.TENCENT_SLI_VER }}
      - name: set serverless.yml and push env
        working-directory: ./JD_tencent_scf
        env:
          # TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
          # TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
          TENCENT_REGION: ${{ secrets.SCF_REGION }}
          TENCENT_FUNCTION_NAME: ${{ secrets.TENCENT_FUNCTION_NAME_EX }}
          TENCENT_MEMORYSIZE: ${{ secrets.TENCENT_MEMORYSIZE }}
          TENCENT_TIMEOUT: ${{ secrets.TENCENT_TIMEOUT }}
          TENCENT_RUNTIME: ${{ secrets.TENCENT_RUNTIME }}
        run: |
          if [[ ! -z $TENCENT_REGION ]]; then sed -i -E 's/region:[^\n]+/region: '"$TENCENT_REGION"'/' serverless.yml; fi;
          if [[ ! -z $TENCENT_FUNCTION_NAME ]]; then sed -i -E 's/^  name:[^\n]+/  name: '"$TENCENT_FUNCTION_NAME"'/' serverless.yml; fi;
          if [[ ! -z $TENCENT_FUNCTION_NAME ]]; then sed -i -E 's/^name:[^\n]+/name: '"$TENCENT_FUNCTION_NAME"'/' serverless.yml; fi;
          if [[ ! -z $TENCENT_MEMORYSIZE ]]; then sed -i -E 's/memorySize:[^\n]+/memorySize: '"$TENCENT_MEMORYSIZE"'/' serverless.yml; fi;
          if [[ ! -z $TENCENT_TIMEOUT ]]; then sed -i -E 's/timeout:[^\n]+/timeout: '"$TENCENT_TIMEOUT"'/' serverless.yml; fi;
          if [[ ! -z $TENCENT_RUNTIME ]]; then sed -i -E 's/runtime:[^\n]+/runtime: '"$TENCENT_RUNTIME"'/' serverless.yml; fi;
          sed -i '/timeout:/a\  eip: true' serverless.yml; 
          sed -i '/timeout:/a\  publicAccess: true' serverless.yml; 
          while read line;do
            echo "      $line" >> serverless.yml
          done < ../config.yml
          # cat serverless.yml
          # cat .env
          PUSH_VARIS=$(sed -r 's/(process.env.[a-z0-9A-Z\_]+)/\1\n/g' sendNotify.js | sed -rn 's/.*process.env.([a-z0-9A-Z\_]+).*/\1/p' | sort | uniq)
          parameter=$(tr "\n" "|" <<< $PUSH_VARIS)
          parameter=${parameter::-1}
          grep -E "^($parameter):" < ../config.yml | sed 's/: /=/' | while read line;do    echo $line >> $GITHUB_ENV;done
      # - name: Check Visibility
      #   working-directory: ./JD_tencent_scf
      #   if: ${{ github.event_name == 'workflow_dispatch' && !github.event.repository.private}}
      #   run: |
      #     echo 'Not a private repo!!! Please change to private!'
      #     echo 'require("./sendNotify").sendNotify("仓库非私有!","配置文件部署方式仓库必须为私有!(如已经私有请忽略并反馈Issues,感谢!)")' > notify.js
      #     node notify.js
      #     rm -rf notify.js
      - name: deploy
        working-directory: ./JD_tencent_scf
        run: |
          slt deploy --debug && echo 'Deploy Success' || (echo 'Deploy Failed'; echo 'require("./sendNotify").sendNotify("云函数部署异常！请重试","点击通知，登入后查看详情",{ url: process.env.GITHUB_SERVER_URL + "/" + process.env.GITHUB_REPOSITORY + "/actions/runs/" + process.env.GITHUB_RUN_ID + "?check_suite_focus=true" })' > notify.js; node notify.js; exit 1)
